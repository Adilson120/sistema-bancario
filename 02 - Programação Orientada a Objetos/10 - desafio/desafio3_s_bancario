import textwrap, re
from abc import ABC, abstractclassmethod, abstractproperty
from datetime import datetime


class Cliente:
    def __init__(self, endereco = str):
        self._endereco = endereco
        self._contas = []

    def realizar_transacao(self, conta, transacao):
        transacao.registrar(conta)

    def adicionar_conta(self, conta):
        self._contas.append(conta)


class PessoaFisica(Cliente):
    def __init__(self, nome, data_nascimento, cpf, endereco):
        super().__init__(endereco)
        self._nome = nome
        self._data_nascimento = data_nascimento
        self._cpf = cpf


class Conta:
    def __init__(self, numero, cliente):
        self._saldo = 0
        self._numero = numero
        self._Agencia = "0430"
        self._cliente = cliente
        self._historico = Historico()

    @classmethod
    def nova_conta(cls, cliente, numero):
        return cls(numero, cliente)

    @property
    def saldo(self):
        return self._saldo

    @property
    def numero(self):
        return self._numero

    @property
    def agencia(self):
        return self._Agencia

    @property
    def cliente(self):
        return self._cliente

    @property
    def historico(self):
        return self._historico

    def sacar(self, valor):
        saldo = self.saldo
        excedeu_saldo = valor > saldo

        if excedeu_saldo:
            print("ERRO: Operação falhou! Você não tem saldo suficiente.")

        elif valor > 0:
            self._saldo -= valor
            print(f'\nSaque de R$ {valor:.2f} efetuado com Sucesso!!!\n\n')
            print(f'Saldo disponível em conta: R$ {self._saldo:.2f}\n')
            print("-" * 50)
            return True

        else:
            print("\nERRO: Operação falhou! O valor informado é inválido!!")

        return self._saldo, False

    def depositar(self, valor):
        if valor > 0:
            self._saldo += valor
            print(f'\nDepósito de R$ {valor:.2f} efetuado com Sucesso!!!')
        else:
            print("\nERRO: Operação falhou! O valor informado é inválido!!!")
            return False

        return self._saldo, True


class ContaCorrente(Conta):
    def __init__(self, numero, cliente, limite = 500, limite_saques = 3):
        super().__init__(numero, cliente)
        self._limite = limite
        self._limite_saques = limite_saques

    def sacar(self, valor):
        numero_saques = len(
            [transacao for transacao in self.historico.transacoes if transacao["tipo"] == Saque.__name__]
        )

        excedeu_limite = valor > self._limite
        excedeu_saques = numero_saques >= self._limite_saques

        if excedeu_limite:
            print("ERRO: Operação falhou! O valor do saque excede o limite diário.")

        elif excedeu_saques:
            print("ERRO: Operação falhou! Número máximo de saques diário excedido.")

        else:
            return super().sacar(valor)

        return False

    def __str__(self):
        return f"""\
            
            Agência:\t{self.agencia}
            C/C:\t\t{self.numero}
                    
            Titular:\t{self.cliente._nome}
            CPF:\t\t{self.cliente._cpf}
            Dt.Nas.:\t{self.cliente._data_nascimento}
            ------------------------------------
        """


class Historico:
    def __init__(self):
        self._transacoes = []

    @property
    def transacoes(self):
        return self._transacoes

    def adicionar_transacao(self, transacao):
        self._transacoes.append(
            {
                "tipo": transacao.__class__.__name__,
                "valor": transacao.valor,
                "data": datetime.now().strftime("%d-%m-%Y %H:%M:%s"),
            }
        )


class Transacao(ABC):
    @property
    @abstractproperty
    def valor(self):
        pass

    @abstractclassmethod
    def registrar(self, conta):
        pass


class Saque(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        sucesso_transacao = conta.sacar(self.valor)

        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)


class Deposito(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        sucesso_transacao = conta.depositar(self.valor)

        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)


def menu():
    menu = """\n
    ================ MENU ================
    [D]\tDepositar
    [S]\tSacar
    [E]\tExtrato
    [N]\tNova conta
    [L]\tListar contas
    [U]\tNovo usuário
    [Q]\tSair
    => """
    return input(textwrap.dedent(menu))


def filtrar_cliente(cpf, clientes):
    clientes_filtrados = [cliente for cliente in clientes if cliente._cpf == cpf]
    return clientes_filtrados[0] if clientes_filtrados else None


def recuperar_conta_cliente(cliente):
    if not cliente._contas:
        print("\nERRO: Cliente não possui conta!!!")
        return

    # FIXME: não permite cliente escolher a conta
    return cliente._contas[0]


def depositar(clientes):
    cpf = input("Informe o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print("\nERRO: Cliente não encontrado!!!")
        return

    valor = float(input("Informe o valor do depósito: "))
    transacao = Deposito(valor)

    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return

    cliente.realizar_transacao(conta, transacao)


def sacar(clientes):
    cpf = input("Informe o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print("\nERRO: Cliente não encontrado!!!")
        return

    valor = float(input("Informe o valor do saque: "))
    transacao = Saque(valor)

    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return

    cliente.realizar_transacao(conta, transacao)


def exibir_extrato(clientes):
    cpf = input("Informe o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print("\nERRO: Cliente não encontrado!!!")
        return

    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return

    print("\n================ EXTRATO ================")
    transacoes = conta.historico.transacoes

    extrato = ""
    if not transacoes:
        extrato = "Não foram realizadas movimentações."
    else:
        for transacao in transacoes:
            extrato += f"\n{transacao['tipo']}:\n\tR$ {transacao['valor']:.2f}"

    print(extrato)
    print(f"\nSaldo:\n\tR$ {conta.saldo:.2f}")
    print("==========================================")

        
def criar_cliente(clientes):

    while True:
        cpf = input("Informe o CPF no formato 000.000.000-00: ")
        cliente = filtrar_cliente(cpf, clientes)

        if re.match(r'(\d{3}).(\d{3}).(\d{3})-(\d{2})', cpf):
            break

        elif cliente:
            print(f"\nERRO: Já existe cliente com esse CPF: {cpf}")
            return
        
        else:
             print("ERRO: Formato de CPF incorreto. Por favor, insira o CPF no formato 000.000.000-00")
        
    nome = input("Informe o nome completo: ")
    while True:
        data_nascimento = input("Informe a data de nascimento (dd/mm/aaaa): ")
        if re.match(r'([0-3])([\d])/([0-3])([\d])/([1-2])([\d]{3})', data_nascimento):
            break
        else:
             print("ERRO: Formato de data incorreto. Por favor, insira a data de nascimento no formato dd/mm/aaaa.")
    
    endereco = input("Informe o endereço (logradouro, número - bairro - Cidade/sigla Estado): ")

    cliente = PessoaFisica(nome=nome, data_nascimento=data_nascimento, cpf=cpf, endereco=endereco)

    clientes.append(cliente)

    print('-' * 50)
    print("\nCliente criado com sucesso!!!")
    print('-' * 50)


def criar_conta(numero_conta, clientes, contas):
    cpf = input("Informe o CPF do cliente: ")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print("\nERRO: Cliente não encontrado, fluxo de criação de conta encerrado!!!")
        return

    conta = ContaCorrente.nova_conta(cliente=cliente, numero=numero_conta)
    contas.append(conta)
    cliente.adicionar_conta(conta)

    print("\nConta criada com sucesso!!!")


def listar_contas(contas):
    if not contas:
        print("ERRO: Ainda não foram criadas contas!!")
    for conta in contas:
        print("=" * 100)
        print(textwrap.dedent(str(conta)))


def main():
    clientes = []
    contas = []
    while True:
        opcao = menu().lower()

        if opcao == "d":
            depositar(clientes)

        elif opcao == "s":
            sacar(clientes)

        elif opcao == "e":
            exibir_extrato(clientes)

        elif opcao == "u":
            criar_cliente(clientes)

        elif opcao == "n":
            numero_conta = 100430 + len(contas) + 1
            criar_conta(numero_conta, clientes, contas)

        elif opcao == "l":
            listar_contas(contas)

        elif opcao == "q":
            break

        else:
            print("\nERRO: Operação inválida, por favor selecione novamente a operação desejada!!!")


main()
