from abc import ABC, abstractclassmethod, abstractproperty
import textwrap
from datetime import datetime

class Transacao(ABC):
    @abstractproperty
    def registrar():
        pass
    
    @property
    @abstractproperty
    def valor():
        pass

class deposito(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self): 
        return self._valor
    
    def registrar(self, conta):
        sucesso_transacao = conta.depositar(self.valor)

        if sucesso_transacao:
            conta._historico.adicionar_transacao(self)

class Historico:
    def __init__(self):
        self._transacoes = []

    @property
    def transacoes(self):
        return self._transacoes

    def adicionar_transacao(self, transacao):
        self._transacoes.append(
            {
                "tipo": transacao.__class__.__name__,
                "valor": transacao.valor,
                "data": datetime.now().strftime("%d-%m-%Y %H:%M"),
            }
        )

class Conta:
    def __init__(self, numero, cliente):
        self._saldo = 0
        self._numero = numero
        self._agencia = "0001"
        self._cliente = cliente
        self._historico = Historico()

    @property
    def saldo(self):
        return self._saldo
    
    @classmethod
    def nova_conta(cls, cliente, numero):
        return cls(numero, cliente)

    def depositar(self, valor):
            if valor > 0:
                self._saldo += valor
                print(f"Deposito de {valor} feito com sucesso")
                return True
                    
            else:
                print("Operação falhou! O valor informado é invalido")

            return 
    
    def sacar(self, valor):
        saldo = self._saldo
        if valor > saldo:
            print("Saldo insuficiente para operação.")

        elif valor > 0:
            self._saldo -= valor
            print(f"Saque realizado no valor {valor}")
            return True
        
        return False

    
class ContaCorrente(Conta):
    def __init__(self, numero, cliente, limite=500, limite_saques=3):
        super().__init__(numero, cliente)
        self.limite = limite
        self.limite_saques = limite_saques

    def sacar(self, valor):   

        numero_saques = len([transacao for transacao in self._historico.transacoes if transacao["tipo"] == saque.__name__])
        if numero_saques >= self.limite_saques:
            print("Operação falhou! O número de 3 saques foi excedido.")

        elif valor > self.limite:
            print("Operação falhou! O valor do saque excede o limite.")

        elif valor < 0:
            print("Operação falhou! Você não tem saldo suficiente.")

        else:
            return super().sacar(valor)
            
        return False 

    def __str__(self):
        return f"""\
            Agência:\t{self._agencia}
            C/C:\t\t{self._numero}
            Titular:\t{self._cliente.nome}
        """ 
  
class Cliente:
    def __init__(self,endereco):
        self.endereco = endereco
        self.contas = []

class saque(Transacao):
    def __init__(self, valor, limite=500, limite_saques=3):
        self.limite = limite
        self.limite_saques = limite_saques
        self._valor = valor

    @property
    def valor(self): 
        return self._valor
        
    
    def registrar(self, conta):
        sucesso_transacao = conta.sacar(self.valor)

        if sucesso_transacao:
            conta._historico.adicionar_transacao(self)


class PessoaFisica(Cliente):
    def __init__(self,cpf,nome,data_nascimento,endereco):
        super().__init__(endereco)
        self.cpf=cpf
        self.nome=nome
        self.data_nascimento=data_nascimento       

    def realizar_transacao(self, conta, transacao):
        transacao.registrar(conta)

    def adicionar_contas(self,conta):
        self.contas.append(conta)    
    
def menu():
    menu = """\n
    ============ MENU ===============
    [d]\tDepositar
    [s]\t Sacar
    [e]\tExtrato
    [nu]\tNovo usuário
    [nc]\tNova conta
    [lc]\tListar contas 
    [q]\tSair
    =>"""
    return input(textwrap.dedent(menu))

def depositar(clientes):
    cpf = input("Informe o CPF do cliente: ")
    cliente = filtrar_cliente(cpf,clientes)

    if not cliente:
        print("Cliente não encontrado")
        return
    
    valor = float(input("Informe o valor do despósito: "))
    transacao = deposito(valor)

    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return
    
    cliente.realizar_transacao(conta, transacao)

def sacar(clientes):   
    cpf = input("Informe o CPF do cliente: ")
    cliente = filtrar_cliente(cpf,clientes)

    if not cliente:
        print("Cliente não encontrado")
        return
    
    valor = float(input("Informe o valor do saque: "))
    transacao = saque(valor, limite=500,limite_saques=3)

    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return
    
    cliente.realizar_transacao(conta, transacao)

def exibir_extrato(clientes):
    cpf = input("Informe o CPF do cliente: ")
    cliente = filtrar_cliente(cpf,clientes)

    if not cliente:
        print("Cliente não encontrado")
        return
    
    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return
    
    print("\n===============EXTRATO=====================")
    transacoes = conta._historico.transacoes

    extrato = ""
    if not transacoes:
        extrato = "Não foram realizadas movimentações."
    else:
        for transacao in transacoes:
            extrato += f"\n{transacao['tipo']}:\n\tR$ {transacao['valor']:.2f}"
        
    print(extrato)    
    print(f"\nSaldo: R${conta.saldo:.2f}")
    print("==============================================")

def criar_cliente(clientes):
    cpf = input("Informe o CPF (somente número):")
    cliente = filtrar_cliente(cpf, clientes)

    if cliente:
        print("Já existe usuário com esse CPF.")
        return

    nome = input("Informe seu nome completo: ")
    data_nascimento = input("Informe sua data de nascimento no seguinte formato (dd-mm-aaaa): ")
    endereco = input("Informe o endereço (logradouro, nro - bairro - cidade/sigla Estado): ")

    cliente = PessoaFisica(nome=nome, cpf=cpf, data_nascimento=data_nascimento, endereco=endereco)

    clientes.append(cliente)

    print("usuario cadastrado com sucesso!!! Seja Bem Vindo")

def criar_conta(numero_conta, clientes, contas):
    cpf = input("Informe o número do CPF do usuário: ")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print("Usuário não encontrado, favor cadastrar o cliente antes da criação de conta")
        return
    
    conta = ContaCorrente.nova_conta(cliente=cliente, numero=numero_conta)
    contas.append(conta)
    cliente.contas.append(conta)

    print("Conta cadastrada com sucesso!!!")

def filtrar_cliente(cpf, clientes):
    clientes_filtrados = [cliente for cliente in clientes if cliente.cpf == cpf]
    return clientes_filtrados[0] if clientes_filtrados else None

def recuperar_conta_cliente(cliente):
    if not cliente.contas:
        print("Cliente não possui conta!")
        return
    
    return cliente.contas[0]

def listar_contas(contas):
    for conta in contas:
        print("===============================")
        print(textwrap.dedent(str(conta)))

def main():

    clientes = []
    contas = []
    
    while True:

        opcao = menu()

        if opcao == "d":
            depositar(clientes)

        elif opcao == "s":
            sacar(clientes)

        elif opcao == "e":
            exibir_extrato(clientes)

        elif opcao == "nu":
            criar_cliente(clientes)

        elif opcao == "nc":
            numero_conta = len(contas) + 1
            criar_conta(numero_conta, clientes,contas)

        elif opcao == "lc":
            listar_contas(contas)

        elif opcao == "q":
            break

        else:
            print("Operação inválida, por favor selecione novamente a operação desejada.")


main()
